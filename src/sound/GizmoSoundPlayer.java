package sound;

import javax.sound.midi.MidiChannel;

import model.gizmos.IGizmo;
import view.IGUI;

/**
 * Plays the sounds generated by the gizmo
 *
 */
class GizmoSoundPlayer extends Thread{
	
	private IGizmo gizmo;
	private IGUI ui;
	
	private static boolean fail = false;

	private MidiChannel[] channels;
	
	/**
	 * The constructor
	 * 
	 * @param g The gizmo to play the sounds for
	 * @param ui The ui to show errors on
	 * @param chan the mididChannel
	 */
	public GizmoSoundPlayer(IGizmo g, IGUI ui, MidiChannel[] chan) {
		channels = chan;
		gizmo = g;
		this.ui = ui;
	}
	
	/*
	 * (non-Javadoc)
	 * @see java.lang.Thread#run()
	 */
	@Override
	public void run() {

		if(fail)
			return;
		
		int channel = 0;
		int volume = 100;
		int duration = 1000;

		int note = 0;
		
		switch (gizmo.getType()) {
		case Square:
			note = 29;
			break;
		case Circle:
			note = 53;
			break;
		case Absorber:
			note = 5;
		case RightFlipper:
		case LeftFlipper:
			note = 89;
			break;
		case Triangle:
			note = 101;
			break;
		}

		try {
			channels[channel].noteOn(note, volume); //turn on sound
			Thread.sleep(duration); //keep sound on
			channels[channel].noteOff(note); //turn off sound	
		}catch (InterruptedException e) {
			ui.displayErrorMessage("Error sleeping a thread in sound");
		}
	}
}
